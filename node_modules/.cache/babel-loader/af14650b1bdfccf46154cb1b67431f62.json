{"ast":null,"code":"var _jsxFileName = \"/Users/chenyuf2/Desktop/three-shader/src/components/ImagePlane/ImagePlane.js\",\n    _s = $RefreshSig$();\n\nimport { useTexture } from \"@react-three/drei\";\nimport { Suspense, useState, useRef } from \"react\";\nimport { IMAGE_BLOCK_HEIGHT, IMAGE_BLOCK_WIDTH } from \"../../utils/utilFormat\";\nimport { useScroll, Image } from \"@react-three/drei\";\nimport { useFrame } from \"@react-three/fiber\";\nimport * as THREE from \"three\";\nimport { imagesArr } from \"../../utils/utilFormat\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst damp = THREE.MathUtils.damp;\n\nconst ImagePlane = _ref => {\n  _s();\n\n  let {\n    index,\n    position,\n    scale,\n    color = new THREE.Color(),\n    ...props\n  } = _ref;\n  const imgRef = useRef();\n  const [hover, setHover] = useState(false);\n  const [click, setClick] = useState(false); // const [imgTexture] = useTexture([imgUrl]);\n  // imgTexture.repeat.set(\n  //   (65 * imgTexture.image.height) / (imgTexture.image.width * 250),\n  //   1\n  // );\n  // imgTexture.offset.set(0.42, 0);\n\n  const numImages = imagesArr.length;\n  const scroll = useScroll(); // useFrame((state, delta) => {\n  //   if (!imgRef.current) return;\n  //   const y = scroll.curve(index / numImages - 1.5 / numImages, 4 / numImages);\n  //   imgRef.current.material.scale[1] = imgRef.current.scale.y = damp(\n  //     imgRef.current.scale.y,\n  //     4 + y,\n  //     8,\n  //     delta\n  //   );\n  //   imgRef.current.material.scale[0] = imgRef.current.scale.x = damp(\n  //     imgRef.current.scale.x,\n  //     1,\n  //     6,\n  //     delta\n  //   );\n  //   imgRef.current.material.grayscale = damp(\n  //     imgRef.current.material.grayscale,\n  //     hover ? 0 : Math.max(0, 1 - y),\n  //     6,\n  //     delta\n  //   );\n  //   imgRef.current.material.color.lerp(\n  //     color.set(hover ? \"white\" : \"#aaa\"),\n  //     hover ? 0.3 : 0.1\n  //   );\n  // });\n\n  return /*#__PURE__*/_jsxDEV(Image, {\n    ref: imgRef,\n    scale: scale,\n    onPointerOver: () => setHover(true),\n    onPointerOut: () => setHover(false),\n    position: position,\n    scale: scale,\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this) // <mesh\n  //   position={position}\n  //   onPointerOver={() => setHover(true)}\n  //   onPointerOut={() => setHover(false)}\n  // >\n  //   <planeGeometry args={[IMAGE_BLOCK_WIDTH, IMAGE_BLOCK_HEIGHT]} />\n  //   <meshBasicMaterial map={imgTexture} ref={imgRef} />\n  // </mesh>\n  ;\n};\n\n_s(ImagePlane, \"u/dCi2iRPJ5EeVpeEiQRGWjdHA4=\", false, function () {\n  return [useScroll];\n});\n\n_c = ImagePlane;\nexport default ImagePlane;\n\nvar _c;\n\n$RefreshReg$(_c, \"ImagePlane\");","map":{"version":3,"sources":["/Users/chenyuf2/Desktop/three-shader/src/components/ImagePlane/ImagePlane.js"],"names":["useTexture","Suspense","useState","useRef","IMAGE_BLOCK_HEIGHT","IMAGE_BLOCK_WIDTH","useScroll","Image","useFrame","THREE","imagesArr","damp","MathUtils","ImagePlane","index","position","scale","color","Color","props","imgRef","hover","setHover","click","setClick","numImages","length","scroll"],"mappings":";;;AAAA,SAASA,UAAT,QAA2B,mBAA3B;AACA,SAASC,QAAT,EAAmBC,QAAnB,EAA6BC,MAA7B,QAA2C,OAA3C;AACA,SAASC,kBAAT,EAA6BC,iBAA7B,QAAsD,wBAAtD;AACA,SAASC,SAAT,EAAoBC,KAApB,QAAiC,mBAAjC;AACA,SAASC,QAAT,QAAyB,oBAAzB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,SAAT,QAA0B,wBAA1B;;AACA,MAAMC,IAAI,GAAGF,KAAK,CAACG,SAAN,CAAgBD,IAA7B;;AACA,MAAME,UAAU,GAAG,QAMb;AAAA;;AAAA,MANc;AAClBC,IAAAA,KADkB;AAElBC,IAAAA,QAFkB;AAGlBC,IAAAA,KAHkB;AAIlBC,IAAAA,KAAK,GAAG,IAAIR,KAAK,CAACS,KAAV,EAJU;AAKlB,OAAGC;AALe,GAMd;AACJ,QAAMC,MAAM,GAAGjB,MAAM,EAArB;AACA,QAAM,CAACkB,KAAD,EAAQC,QAAR,IAAoBpB,QAAQ,CAAC,KAAD,CAAlC;AACA,QAAM,CAACqB,KAAD,EAAQC,QAAR,IAAoBtB,QAAQ,CAAC,KAAD,CAAlC,CAHI,CAIJ;AACA;AACA;AACA;AACA;AACA;;AACA,QAAMuB,SAAS,GAAGf,SAAS,CAACgB,MAA5B;AACA,QAAMC,MAAM,GAAGrB,SAAS,EAAxB,CAXI,CAYJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,sBACE,QAAC,KAAD;AACE,IAAA,GAAG,EAAEc,MADP;AAEE,IAAA,KAAK,EAAEJ,KAFT;AAGE,IAAA,aAAa,EAAE,MAAMM,QAAQ,CAAC,IAAD,CAH/B;AAIE,IAAA,YAAY,EAAE,MAAMA,QAAQ,CAAC,KAAD,CAJ9B;AAKE,IAAA,QAAQ,EAAEP,QALZ;AAME,IAAA,KAAK,EAAEC,KANT;AAAA,OAOMG;AAPN;AAAA;AAAA;AAAA;AAAA,UADF,CAUE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBF;AAmBD,CA/DD;;GAAMN,U;UAiBWP,S;;;KAjBXO,U;AAiEN,eAAeA,UAAf","sourcesContent":["import { useTexture } from \"@react-three/drei\";\nimport { Suspense, useState, useRef } from \"react\";\nimport { IMAGE_BLOCK_HEIGHT, IMAGE_BLOCK_WIDTH } from \"../../utils/utilFormat\";\nimport { useScroll, Image } from \"@react-three/drei\";\nimport { useFrame } from \"@react-three/fiber\";\nimport * as THREE from \"three\";\nimport { imagesArr } from \"../../utils/utilFormat\";\nconst damp = THREE.MathUtils.damp;\nconst ImagePlane = ({\n  index,\n  position,\n  scale,\n  color = new THREE.Color(),\n  ...props\n}) => {\n  const imgRef = useRef();\n  const [hover, setHover] = useState(false);\n  const [click, setClick] = useState(false);\n  // const [imgTexture] = useTexture([imgUrl]);\n  // imgTexture.repeat.set(\n  //   (65 * imgTexture.image.height) / (imgTexture.image.width * 250),\n  //   1\n  // );\n  // imgTexture.offset.set(0.42, 0);\n  const numImages = imagesArr.length;\n  const scroll = useScroll();\n  // useFrame((state, delta) => {\n  //   if (!imgRef.current) return;\n  //   const y = scroll.curve(index / numImages - 1.5 / numImages, 4 / numImages);\n  //   imgRef.current.material.scale[1] = imgRef.current.scale.y = damp(\n  //     imgRef.current.scale.y,\n  //     4 + y,\n  //     8,\n  //     delta\n  //   );\n  //   imgRef.current.material.scale[0] = imgRef.current.scale.x = damp(\n  //     imgRef.current.scale.x,\n  //     1,\n  //     6,\n  //     delta\n  //   );\n  //   imgRef.current.material.grayscale = damp(\n  //     imgRef.current.material.grayscale,\n  //     hover ? 0 : Math.max(0, 1 - y),\n  //     6,\n  //     delta\n  //   );\n  //   imgRef.current.material.color.lerp(\n  //     color.set(hover ? \"white\" : \"#aaa\"),\n  //     hover ? 0.3 : 0.1\n  //   );\n  // });\n  return (\n    <Image\n      ref={imgRef}\n      scale={scale}\n      onPointerOver={() => setHover(true)}\n      onPointerOut={() => setHover(false)}\n      position={position}\n      scale={scale}\n      {...props}\n    />\n    // <mesh\n    //   position={position}\n    //   onPointerOver={() => setHover(true)}\n    //   onPointerOut={() => setHover(false)}\n    // >\n    //   <planeGeometry args={[IMAGE_BLOCK_WIDTH, IMAGE_BLOCK_HEIGHT]} />\n    //   <meshBasicMaterial map={imgTexture} ref={imgRef} />\n    // </mesh>\n  );\n};\n\nexport default ImagePlane;\n"]},"metadata":{},"sourceType":"module"}