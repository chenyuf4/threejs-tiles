{"ast":null,"code":"var _jsxFileName = \"/Users/chenyuf2/Desktop/three-shader/src/components/Scene/Scene.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\n// import ImagePlane from \"../ImagePlane/ImagePlane\";\n// import { Suspense } from \"react\";\n// import { IMAGE_BLOCK_WIDTH, IMAGE_GAP } from \"../../utils/utilFormat\";\n// import { useThree } from \"@react-three/fiber\";\n// import { ScrollControls, Scroll } from \"@react-three/drei\";\n// import { imagesArr } from \"../../utils/utilFormat\";\n// const Scene = () => {\n//   const imgWidth = 0.7;\n//   const imgGap = 0.15;\n//   const numImages = imagesArr.length;\n//   const { width } = useThree((state) => state.viewport);\n//   const itemsLength = width + (numImages - 1) * (imgWidth + imgGap);\n//   return (\n//     <Suspense fallback={null}>\n//       <ScrollControls horizontal damping={5} pages={itemsLength / width}>\n//         <Scroll>\n//           {imagesArr.map((url, index) => {\n//             const imagePosition = [imgWidth * index + imgGap * index, 0, 0];\n//             return (\n//               <ImagePlane\n//                 key={index}\n//                 index={index}\n//                 url={url}\n//                 position={imagePosition}\n//                 scale={[imgWidth, 4, 1]}\n//               />\n//             );\n//           })}\n//         </Scroll>\n//       </ScrollControls>\n//     </Suspense>\n//   );\n// };\n// export default Scene;\nimport * as THREE from \"three\";\nimport { useRef, useState, Suspense } from \"react\";\nimport { Canvas, useFrame, useThree } from \"@react-three/fiber\";\nimport { Image, ScrollControls, Scroll, useScroll } from \"@react-three/drei\";\nimport { imagesArr } from \"../../utils/utilFormat\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Item(_ref) {\n  _s();\n\n  let {\n    index,\n    position,\n    scale,\n    c = new THREE.Color(),\n    ...props\n  } = _ref;\n  const ref = useRef();\n  const scroll = useScroll();\n  const [hovered, hover] = useState(false);\n\n  const over = () => hover(true);\n\n  const out = () => hover(false);\n\n  useFrame((state, delta) => {// const y = scroll.curve(index / urls.length - 1.5 / urls.length, 4 / urls.length)\n    // ref.current.material.scale[1] = ref.current.scale.y = damp(ref.current.scale.y, clicked === index ? 5 : 4 + y, 8, delta)\n    // ref.current.material.scale[0] = ref.current.scale.x = damp(ref.current.scale.x, clicked === index ? 4.7 : scale[0], 6, delta)\n    // if (clicked !== null && index < clicked) ref.current.position.x = damp(ref.current.position.x, position[0] - 2, 6, delta)\n    // if (clicked !== null && index > clicked) ref.current.position.x = damp(ref.current.position.x, position[0] + 2, 6, delta)\n    // if (clicked === null || clicked === index) ref.current.position.x = damp(ref.current.position.x, position[0], 6, delta)\n    // ref.current.material.grayscale = damp(ref.current.material.grayscale, hovered || clicked === index ? 0 : Math.max(0, 1 - y), 6, delta)\n    // ref.current.material.color.lerp(c.set(hovered || clicked === index ? 'white' : '#aaa'), hovered ? 0.3 : 0.1)\n  });\n  return /*#__PURE__*/_jsxDEV(Image, {\n    ref: ref,\n    ...props,\n    position: position,\n    scale: scale,\n    onPointerOver: over,\n    onPointerOut: out\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Item, \"O413hzJcJDqSg80qYtidasb6HzA=\", false, function () {\n  return [useScroll, useFrame];\n});\n\n_c = Item;\n\nfunction Items(_ref2) {\n  _s2();\n\n  let {\n    w = 0.7,\n    gap = 0.15\n  } = _ref2;\n  const urls = imagesArr;\n  const {\n    width\n  } = useThree(state => state.viewport);\n  const xW = w + gap;\n  return /*#__PURE__*/_jsxDEV(ScrollControls, {\n    horizontal: true,\n    damping: 6,\n    pages: (width - xW + urls.length * xW) / width,\n    children: /*#__PURE__*/_jsxDEV(Scroll, {\n      children: urls.map((url, i) => {\n        console.log([i * xW, 0, 0]);\n        return /*#__PURE__*/_jsxDEV(Item, {\n          index: i,\n          position: [i * xW, 0, 0],\n          scale: [w, 4, 1],\n          url: url\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 20\n        }, this);\n      })\n      /* prettier-ignore */\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(Items, \"IpnJ6lEh1uS9mmdIchuxUYOu3jw=\", false, function () {\n  return [useThree];\n});\n\n_c2 = Items;\n\nconst Scene = () => /*#__PURE__*/_jsxDEV(Suspense, {\n  fallback: null,\n  children: /*#__PURE__*/_jsxDEV(Items, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 96,\n  columnNumber: 3\n}, this);\n\n_c3 = Scene;\nexport default Scene;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Item\");\n$RefreshReg$(_c2, \"Items\");\n$RefreshReg$(_c3, \"Scene\");","map":{"version":3,"sources":["/Users/chenyuf2/Desktop/three-shader/src/components/Scene/Scene.js"],"names":["THREE","useRef","useState","Suspense","Canvas","useFrame","useThree","Image","ScrollControls","Scroll","useScroll","imagesArr","Item","index","position","scale","c","Color","props","ref","scroll","hovered","hover","over","out","state","delta","Items","w","gap","urls","width","viewport","xW","length","map","url","i","console","log","Scene"],"mappings":"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","sourcesContent":["// import ImagePlane from \"../ImagePlane/ImagePlane\";\n// import { Suspense } from \"react\";\n\n// import { IMAGE_BLOCK_WIDTH, IMAGE_GAP } from \"../../utils/utilFormat\";\n// import { useThree } from \"@react-three/fiber\";\n// import { ScrollControls, Scroll } from \"@react-three/drei\";\n// import { imagesArr } from \"../../utils/utilFormat\";\n\n// const Scene = () => {\n//   const imgWidth = 0.7;\n//   const imgGap = 0.15;\n//   const numImages = imagesArr.length;\n//   const { width } = useThree((state) => state.viewport);\n//   const itemsLength = width + (numImages - 1) * (imgWidth + imgGap);\n\n//   return (\n//     <Suspense fallback={null}>\n//       <ScrollControls horizontal damping={5} pages={itemsLength / width}>\n//         <Scroll>\n//           {imagesArr.map((url, index) => {\n//             const imagePosition = [imgWidth * index + imgGap * index, 0, 0];\n//             return (\n//               <ImagePlane\n//                 key={index}\n//                 index={index}\n//                 url={url}\n//                 position={imagePosition}\n//                 scale={[imgWidth, 4, 1]}\n//               />\n//             );\n//           })}\n//         </Scroll>\n//       </ScrollControls>\n//     </Suspense>\n//   );\n// };\n\n// export default Scene;\n\nimport * as THREE from \"three\";\nimport { useRef, useState, Suspense } from \"react\";\nimport { Canvas, useFrame, useThree } from \"@react-three/fiber\";\nimport { Image, ScrollControls, Scroll, useScroll } from \"@react-three/drei\";\nimport { imagesArr } from \"../../utils/utilFormat\";\n\nfunction Item({ index, position, scale, c = new THREE.Color(), ...props }) {\n  const ref = useRef();\n  const scroll = useScroll();\n  const [hovered, hover] = useState(false);\n  const over = () => hover(true);\n  const out = () => hover(false);\n  useFrame((state, delta) => {\n    // const y = scroll.curve(index / urls.length - 1.5 / urls.length, 4 / urls.length)\n    // ref.current.material.scale[1] = ref.current.scale.y = damp(ref.current.scale.y, clicked === index ? 5 : 4 + y, 8, delta)\n    // ref.current.material.scale[0] = ref.current.scale.x = damp(ref.current.scale.x, clicked === index ? 4.7 : scale[0], 6, delta)\n    // if (clicked !== null && index < clicked) ref.current.position.x = damp(ref.current.position.x, position[0] - 2, 6, delta)\n    // if (clicked !== null && index > clicked) ref.current.position.x = damp(ref.current.position.x, position[0] + 2, 6, delta)\n    // if (clicked === null || clicked === index) ref.current.position.x = damp(ref.current.position.x, position[0], 6, delta)\n    // ref.current.material.grayscale = damp(ref.current.material.grayscale, hovered || clicked === index ? 0 : Math.max(0, 1 - y), 6, delta)\n    // ref.current.material.color.lerp(c.set(hovered || clicked === index ? 'white' : '#aaa'), hovered ? 0.3 : 0.1)\n  });\n  return (\n    <Image\n      ref={ref}\n      {...props}\n      position={position}\n      scale={scale}\n      onPointerOver={over}\n      onPointerOut={out}\n    />\n  );\n}\n\nfunction Items({ w = 0.7, gap = 0.15 }) {\n  const urls = imagesArr;\n  const { width } = useThree((state) => state.viewport);\n  const xW = w + gap;\n  return (\n    <ScrollControls\n      horizontal\n      damping={6}\n      pages={(width - xW + urls.length * xW) / width}\n    >\n      <Scroll>\n        {\n          urls.map((url, i) => {\n            console.log([i * xW, 0, 0])\n            return <Item key={i} index={i} position={[i * xW, 0, 0]} scale={[w, 4, 1]} url={url} />}) /* prettier-ignore */\n        }\n      </Scroll>\n    </ScrollControls>\n  );\n}\n\nconst Scene = () => (\n  <Suspense fallback={null}>\n    <Items />\n  </Suspense>\n);\n\nexport default Scene;\n"]},"metadata":{},"sourceType":"module"}