{"ast":null,"code":"var _jsxFileName = \"/Users/chenyuf2/Desktop/three-shader/src/components/ImagePlane/ImagePlane.js\",\n    _s = $RefreshSig$();\n\nimport { useTexture } from \"@react-three/drei\";\nimport { Suspense, useState, useRef, useEffect } from \"react\";\nimport { IMAGE_BLOCK_HEIGHT, IMAGE_BLOCK_WIDTH } from \"../../utils/utilFormat\";\nimport { useScroll, Image } from \"@react-three/drei\";\nimport { useFrame } from \"@react-three/fiber\";\nimport * as THREE from \"three\";\nimport { imagesArr } from \"../../utils/utilFormat\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst damp = THREE.MathUtils.damp;\n\nconst ImagePlane = _ref => {\n  _s();\n\n  let {\n    index,\n    position = [0, 0, 0],\n    scale = [1, 1, 1],\n    color = new THREE.Color(),\n    url,\n    ...props\n  } = _ref;\n  const imgRef = useRef();\n  const [hover, setHover] = useState(false);\n  const [click, setClick] = useState(false);\n  const [imgTexture] = useTexture([url]);\n  imgTexture.repeat.set(65 * imgTexture.image.height / (imgTexture.image.width * 250), 1);\n  imgTexture.offset.set(0.42, 0);\n  const numImages = imagesArr.length;\n  const scroll = useScroll(); // useEffect(() => {\n  //   console.log(imgRef.current.material);\n  // });\n\n  useFrame((state, delta) => {\n    if (!imgRef.current) return;\n    const y = scroll.curve(index / numImages - 1.5 / numImages, 4 / numImages); // imgRef.current.material.scale[1] = imgRef.current.scale.y = damp(\n    //   imgRef.current.scale.y,\n    //   4 + y,\n    //   8,\n    //   delta\n    // );\n    // imgRef.current.material.scale[0] = imgRef.current.scale.x = damp(\n    //   imgRef.current.scale.x,\n    //   1,\n    //   6,\n    //   delta\n    // );\n    // imgRef.current.material.grayscale = damp(\n    //   imgRef.current.material.grayscale || 0,\n    //   hover ? 0 : Math.max(0, 1 - y),\n    //   6,\n    //   delta\n    // );\n    // imgRef.current.material.color.lerp(\n    //   color.set(hover ? \"white\" : \"#aaa\"),\n    //   hover ? 0.3 : 0.1\n    // );\n  });\n  return /*#__PURE__*/_jsxDEV(Image, {\n    url: url,\n    position: [0, 0, 0],\n    scale: [100, 300, 1]\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this) // <mesh\n  //   ref={imgRef}\n  //   position={position}\n  //   onPointerOver={() => setHover(true)}\n  //   onPointerOut={() => setHover(false)}\n  // >\n  //   <planeGeometry args={[IMAGE_BLOCK_WIDTH, IMAGE_BLOCK_HEIGHT]} />\n  //   <meshBasicMaterial map={imgTexture} ref={imgRef} />\n  // </mesh>\n  ;\n};\n\n_s(ImagePlane, \"kP0cB9AIIYItDACqePU6GL4FiiE=\", false, function () {\n  return [useTexture, useScroll, useFrame];\n});\n\n_c = ImagePlane;\nexport default ImagePlane;\n\nvar _c;\n\n$RefreshReg$(_c, \"ImagePlane\");","map":{"version":3,"sources":["/Users/chenyuf2/Desktop/three-shader/src/components/ImagePlane/ImagePlane.js"],"names":["useTexture","Suspense","useState","useRef","useEffect","IMAGE_BLOCK_HEIGHT","IMAGE_BLOCK_WIDTH","useScroll","Image","useFrame","THREE","imagesArr","damp","MathUtils","ImagePlane","index","position","scale","color","Color","url","props","imgRef","hover","setHover","click","setClick","imgTexture","repeat","set","image","height","width","offset","numImages","length","scroll","state","delta","current","y","curve"],"mappings":";;;AAAA,SAASA,UAAT,QAA2B,mBAA3B;AACA,SAASC,QAAT,EAAmBC,QAAnB,EAA6BC,MAA7B,EAAqCC,SAArC,QAAsD,OAAtD;AACA,SAASC,kBAAT,EAA6BC,iBAA7B,QAAsD,wBAAtD;AACA,SAASC,SAAT,EAAoBC,KAApB,QAAiC,mBAAjC;AACA,SAASC,QAAT,QAAyB,oBAAzB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,SAAT,QAA0B,wBAA1B;;AACA,MAAMC,IAAI,GAAGF,KAAK,CAACG,SAAN,CAAgBD,IAA7B;;AACA,MAAME,UAAU,GAAG,QAOb;AAAA;;AAAA,MAPc;AAClBC,IAAAA,KADkB;AAElBC,IAAAA,QAAQ,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFO;AAGlBC,IAAAA,KAAK,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAHU;AAIlBC,IAAAA,KAAK,GAAG,IAAIR,KAAK,CAACS,KAAV,EAJU;AAKlBC,IAAAA,GALkB;AAMlB,OAAGC;AANe,GAOd;AACJ,QAAMC,MAAM,GAAGnB,MAAM,EAArB;AACA,QAAM,CAACoB,KAAD,EAAQC,QAAR,IAAoBtB,QAAQ,CAAC,KAAD,CAAlC;AACA,QAAM,CAACuB,KAAD,EAAQC,QAAR,IAAoBxB,QAAQ,CAAC,KAAD,CAAlC;AACA,QAAM,CAACyB,UAAD,IAAe3B,UAAU,CAAC,CAACoB,GAAD,CAAD,CAA/B;AACAO,EAAAA,UAAU,CAACC,MAAX,CAAkBC,GAAlB,CACG,KAAKF,UAAU,CAACG,KAAX,CAAiBC,MAAvB,IAAkCJ,UAAU,CAACG,KAAX,CAAiBE,KAAjB,GAAyB,GAA3D,CADF,EAEE,CAFF;AAIAL,EAAAA,UAAU,CAACM,MAAX,CAAkBJ,GAAlB,CAAsB,IAAtB,EAA4B,CAA5B;AACA,QAAMK,SAAS,GAAGvB,SAAS,CAACwB,MAA5B;AACA,QAAMC,MAAM,GAAG7B,SAAS,EAAxB,CAXI,CAYJ;AACA;AACA;;AACAE,EAAAA,QAAQ,CAAC,CAAC4B,KAAD,EAAQC,KAAR,KAAkB;AACzB,QAAI,CAAChB,MAAM,CAACiB,OAAZ,EAAqB;AACrB,UAAMC,CAAC,GAAGJ,MAAM,CAACK,KAAP,CAAa1B,KAAK,GAAGmB,SAAR,GAAoB,MAAMA,SAAvC,EAAkD,IAAIA,SAAtD,CAAV,CAFyB,CAGzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,GAzBO,CAAR;AA0BA,sBACE,QAAC,KAAD;AAAO,IAAA,GAAG,EAAEd,GAAZ;AAAiB,IAAA,QAAQ,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAA3B;AAAsC,IAAA,KAAK,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,CAAX;AAA7C;AAAA;AAAA;AAAA;AAAA,UADF,CAEE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVF;AAYD,CA5DD;;GAAMN,U;UAWiBd,U,EAONO,S,EAIfE,Q;;;KAtBIK,U;AA8DN,eAAeA,UAAf","sourcesContent":["import { useTexture } from \"@react-three/drei\";\nimport { Suspense, useState, useRef, useEffect } from \"react\";\nimport { IMAGE_BLOCK_HEIGHT, IMAGE_BLOCK_WIDTH } from \"../../utils/utilFormat\";\nimport { useScroll, Image } from \"@react-three/drei\";\nimport { useFrame } from \"@react-three/fiber\";\nimport * as THREE from \"three\";\nimport { imagesArr } from \"../../utils/utilFormat\";\nconst damp = THREE.MathUtils.damp;\nconst ImagePlane = ({\n  index,\n  position = [0, 0, 0],\n  scale = [1, 1, 1],\n  color = new THREE.Color(),\n  url,\n  ...props\n}) => {\n  const imgRef = useRef();\n  const [hover, setHover] = useState(false);\n  const [click, setClick] = useState(false);\n  const [imgTexture] = useTexture([url]);\n  imgTexture.repeat.set(\n    (65 * imgTexture.image.height) / (imgTexture.image.width * 250),\n    1\n  );\n  imgTexture.offset.set(0.42, 0);\n  const numImages = imagesArr.length;\n  const scroll = useScroll();\n  // useEffect(() => {\n  //   console.log(imgRef.current.material);\n  // });\n  useFrame((state, delta) => {\n    if (!imgRef.current) return;\n    const y = scroll.curve(index / numImages - 1.5 / numImages, 4 / numImages);\n    // imgRef.current.material.scale[1] = imgRef.current.scale.y = damp(\n    //   imgRef.current.scale.y,\n    //   4 + y,\n    //   8,\n    //   delta\n    // );\n    // imgRef.current.material.scale[0] = imgRef.current.scale.x = damp(\n    //   imgRef.current.scale.x,\n    //   1,\n    //   6,\n    //   delta\n    // );\n    // imgRef.current.material.grayscale = damp(\n    //   imgRef.current.material.grayscale || 0,\n    //   hover ? 0 : Math.max(0, 1 - y),\n    //   6,\n    //   delta\n    // );\n    // imgRef.current.material.color.lerp(\n    //   color.set(hover ? \"white\" : \"#aaa\"),\n    //   hover ? 0.3 : 0.1\n    // );\n  });\n  return (\n    <Image url={url} position={[0, 0, 0]} scale={[100, 300, 1]} />\n    // <mesh\n    //   ref={imgRef}\n    //   position={position}\n    //   onPointerOver={() => setHover(true)}\n    //   onPointerOut={() => setHover(false)}\n    // >\n    //   <planeGeometry args={[IMAGE_BLOCK_WIDTH, IMAGE_BLOCK_HEIGHT]} />\n    //   <meshBasicMaterial map={imgTexture} ref={imgRef} />\n    // </mesh>\n  );\n};\n\nexport default ImagePlane;\n"]},"metadata":{},"sourceType":"module"}