{"ast":null,"code":"var _jsxFileName = \"/Users/chenyuf2/Desktop/three-shader/src/components/Scene/Scene.js\",\n    _s = $RefreshSig$();\n\nimport ImagePlane from \"../ImagePlane/ImagePlane\";\nimport { Suspense, useRef, useState } from \"react\";\nimport img1 from \"../../assets/image/img1.webp\";\nimport img2 from \"../../assets/image/img2.webp\";\nimport img3 from \"../../assets/image/img3.webp\";\nimport img4 from \"../../assets/image/img4.webp\";\nimport img5 from \"../../assets/image/img5.webp\";\nimport img6 from \"../../assets/image/img6.webp\";\nimport img7 from \"../../assets/image/img7.webp\";\nimport img8 from \"../../assets/image/img8.webp\";\nimport img9 from \"../../assets/image/img9.webp\";\nimport img10 from \"../../assets/image/img10.webp\";\nimport { IMAGE_BLOCK_WIDTH, IMAGE_GAP } from \"../../utils/utilFormat\";\nimport { useFrame, useThree } from \"@react-three/fiber\";\nimport { useStore } from \"../../store/store\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Scene = () => {\n  _s();\n\n  const imageGroupRef = useRef();\n  const [reachLeftBoundary, setReachLeftBoundary] = useState(true);\n  const [reachRightBoundary, setReachRightBoundary] = useState(false);\n  const {\n    scrollSpeed,\n    setScrollSpeed,\n    scrollDirection,\n    setScrollDirection\n  } = useStore();\n  const imagesArr = [img1, img2, img3, img4, img5, img6, img7, img8, img9, img10, img1, img2, img3, img4, img5, img6, img7, img8, img9, img10, img1, img2, img3, img4, img5, img6, img7, img8, img9, img10];\n  const numImages = imagesArr.length;\n  const leftBoundary = 0;\n  const rightBoundary = -((numImages - 1) * IMAGE_BLOCK_WIDTH + (numImages - 1) * IMAGE_GAP);\n  useFrame((state, delta) => {\n    if (imageGroupRef.current) {\n      const {\n        x,\n        y,\n        z\n      } = imageGroupRef.current.position;\n      const nextXPos = scrollDirection === \"L\" ? Math.max(rightBoundary, x - scrollSpeed) : Math.min(leftBoundary, x + scrollSpeed); // if already reach boundary\n\n      if (reachLeftBoundary && scrollDirection === \"R\") {\n        setScrollSpeed(0);\n        return;\n      }\n\n      if (reachRightBoundary && scrollDirection === \"L\") {\n        setScrollSpeed(0);\n        return;\n      }\n\n      if (nextXPos >= leftBoundary) {\n        setReachLeftBoundary(true);\n      }\n\n      if (nextXPos <= rightBoundary) {\n        setReachRightBoundary(true);\n      }\n\n      imageGroupRef.current.position.set(nextXPos, y, z);\n      setScrollSpeed(0); // if (scrollDirection === \"L\") {\n      // }\n      // if (x - scrollSpeed <= rightBoundary) {\n      //   imageGroupRef.current.position.set(rightBoundary, y, z);\n      //   setScrollSpeed(0);\n      //   return;\n      // }\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(Suspense, {\n    fallback: null,\n    children: /*#__PURE__*/_jsxDEV(\"group\", {\n      ref: imageGroupRef,\n      children: imagesArr.map((url, index) => {\n        const imagePosition = [IMAGE_BLOCK_WIDTH * index + IMAGE_GAP * index, 0, 0];\n        return /*#__PURE__*/_jsxDEV(ImagePlane, {\n          imgUrl: url,\n          position: imagePosition\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Scene, \"FSuwkULGfPT+6YPrQM54O+kahJk=\", false, function () {\n  return [useStore, useFrame];\n});\n\n_c = Scene;\nexport default Scene;\n\nvar _c;\n\n$RefreshReg$(_c, \"Scene\");","map":{"version":3,"sources":["/Users/chenyuf2/Desktop/three-shader/src/components/Scene/Scene.js"],"names":["ImagePlane","Suspense","useRef","useState","img1","img2","img3","img4","img5","img6","img7","img8","img9","img10","IMAGE_BLOCK_WIDTH","IMAGE_GAP","useFrame","useThree","useStore","Scene","imageGroupRef","reachLeftBoundary","setReachLeftBoundary","reachRightBoundary","setReachRightBoundary","scrollSpeed","setScrollSpeed","scrollDirection","setScrollDirection","imagesArr","numImages","length","leftBoundary","rightBoundary","state","delta","current","x","y","z","position","nextXPos","Math","max","min","set","map","url","index","imagePosition"],"mappings":"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","sourcesContent":["import ImagePlane from \"../ImagePlane/ImagePlane\";\nimport { Suspense, useRef, useState } from \"react\";\nimport img1 from \"../../assets/image/img1.webp\";\nimport img2 from \"../../assets/image/img2.webp\";\nimport img3 from \"../../assets/image/img3.webp\";\nimport img4 from \"../../assets/image/img4.webp\";\nimport img5 from \"../../assets/image/img5.webp\";\nimport img6 from \"../../assets/image/img6.webp\";\nimport img7 from \"../../assets/image/img7.webp\";\nimport img8 from \"../../assets/image/img8.webp\";\nimport img9 from \"../../assets/image/img9.webp\";\nimport img10 from \"../../assets/image/img10.webp\";\nimport { IMAGE_BLOCK_WIDTH, IMAGE_GAP } from \"../../utils/utilFormat\";\nimport { useFrame, useThree } from \"@react-three/fiber\";\nimport { useStore } from \"../../store/store\";\nconst Scene = () => {\n  const imageGroupRef = useRef();\n  const [reachLeftBoundary, setReachLeftBoundary] = useState(true);\n  const [reachRightBoundary, setReachRightBoundary] = useState(false);\n  const { scrollSpeed, setScrollSpeed, scrollDirection, setScrollDirection } =\n    useStore();\n  const imagesArr = [\n    img1,\n    img2,\n    img3,\n    img4,\n    img5,\n    img6,\n    img7,\n    img8,\n    img9,\n    img10,\n    img1,\n    img2,\n    img3,\n    img4,\n    img5,\n    img6,\n    img7,\n    img8,\n    img9,\n    img10,\n    img1,\n    img2,\n    img3,\n    img4,\n    img5,\n    img6,\n    img7,\n    img8,\n    img9,\n    img10,\n  ];\n  const numImages = imagesArr.length;\n  const leftBoundary = 0;\n  const rightBoundary = -(\n    (numImages - 1) * IMAGE_BLOCK_WIDTH +\n    (numImages - 1) * IMAGE_GAP\n  );\n\n  useFrame((state, delta) => {\n    if (imageGroupRef.current) {\n      const { x, y, z } = imageGroupRef.current.position;\n      const nextXPos =\n        scrollDirection === \"L\"\n          ? Math.max(rightBoundary, x - scrollSpeed)\n          : Math.min(leftBoundary, x + scrollSpeed);\n      // if already reach boundary\n      if (reachLeftBoundary && scrollDirection === \"R\") {\n        setScrollSpeed(0);\n        return;\n      }\n      if (reachRightBoundary && scrollDirection === \"L\") {\n        setScrollSpeed(0);\n        return;\n      }\n      if (nextXPos >= leftBoundary) {\n        setReachLeftBoundary(true);\n      }\n      if (nextXPos <= rightBoundary) {\n        setReachRightBoundary(true);\n      }\n      imageGroupRef.current.position.set(nextXPos, y, z);\n      setScrollSpeed(0);\n      // if (scrollDirection === \"L\") {\n\n      // }\n      // if (x - scrollSpeed <= rightBoundary) {\n      //   imageGroupRef.current.position.set(rightBoundary, y, z);\n      //   setScrollSpeed(0);\n      //   return;\n      // }\n    }\n  });\n  return (\n    <Suspense fallback={null}>\n      <group ref={imageGroupRef}>\n        {imagesArr.map((url, index) => {\n          const imagePosition = [\n            IMAGE_BLOCK_WIDTH * index + IMAGE_GAP * index,\n            0,\n            0,\n          ];\n          return (\n            <ImagePlane key={index} imgUrl={url} position={imagePosition} />\n          );\n        })}\n      </group>\n    </Suspense>\n  );\n};\n\nexport default Scene;\n"]},"metadata":{},"sourceType":"module"}