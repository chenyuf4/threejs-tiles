{"ast":null,"code":"var _jsxFileName = \"/Users/chenyuf2/Desktop/three-shader/src/components/Scene/Scene.js\",\n    _s = $RefreshSig$();\n\n// import ImagePlane from \"../ImagePlane/ImagePlane\";\n// import { Suspense } from \"react\";\n// import { IMAGE_BLOCK_WIDTH, IMAGE_GAP } from \"../../utils/utilFormat\";\n// import { useThree } from \"@react-three/fiber\";\n// import { ScrollControls, Scroll } from \"@react-three/drei\";\n// import { imagesArr } from \"../../utils/utilFormat\";\n// const Scene = () => {\n//   const imgWidth = 0.7;\n//   const imgGap = 0.15;\n//   const numImages = imagesArr.length;\n//   const { width } = useThree((state) => state.viewport);\n//   const itemsLength = width + (numImages - 1) * (imgWidth + imgGap);\n//   return (\n//     <Suspense fallback={null}>\n//       <ScrollControls horizontal damping={5} pages={itemsLength / width}>\n//         <Scroll>\n//           {imagesArr.map((url, index) => {\n//             const imagePosition = [imgWidth * index + imgGap * index, 0, 0];\n//             return (\n//               <ImagePlane\n//                 key={index}\n//                 index={index}\n//                 url={url}\n//                 position={imagePosition}\n//                 scale={[imgWidth, 4, 1]}\n//               />\n//             );\n//           })}\n//         </Scroll>\n//       </ScrollControls>\n//     </Suspense>\n//   );\n// };\n// export default Scene;\nimport * as THREE from \"three\";\nimport { useRef } from \"react\";\nimport { useFrame, useThree } from \"@react-three/fiber\";\nimport { useScroll } from \"@react-three/drei\";\nimport { imagesArr } from \"../../utils/utilFormat\";\nimport { state, damp } from \"./util\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst material = new THREE.LineBasicMaterial({\n  color: \"white\"\n});\nconst geometry = new THREE.BufferGeometry().setFromPoints([new THREE.Vector3(0, -0.5, 0), new THREE.Vector3(0, 0.5, 0)]);\nexport function Minimap() {\n  _s();\n\n  const ref = useRef();\n  const scroll = useScroll();\n  const {\n    urls\n  } = useSnapshot(state);\n  const {\n    height\n  } = useThree(state => state.viewport);\n  useFrame((state, delta) => {\n    ref.current.children.forEach((child, index) => {\n      // Give me a value between 0 and 1\n      //   starting at the position of my item\n      //   ranging across 4 / total length\n      //   make it a sine, so the value goes from 0 to 1 to 0.\n      const y = scroll.curve(index / urls.length - 1.5 / urls.length, 4 / urls.length);\n      child.scale.y = damp(child.scale.y, 0.1 + y / 6, 8, delta);\n    });\n  });\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    ref: ref,\n    children: urls.map((_, i) => /*#__PURE__*/_jsxDEV(\"line\", {\n      geometry: geometry,\n      material: material,\n      position: [i * 0.06 - urls.length * 0.03, -height / 2 + 0.6, 0]\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Minimap, \"rlRycve/yJIo7v3n4sN6VZmRbYQ=\", true, function () {\n  return [useScroll, useThree, useFrame];\n});\n\n_c = Minimap;\n\nvar _c;\n\n$RefreshReg$(_c, \"Minimap\");","map":{"version":3,"sources":["/Users/chenyuf2/Desktop/three-shader/src/components/Scene/Scene.js"],"names":["THREE","useRef","useFrame","useThree","useScroll","imagesArr","state","damp","material","LineBasicMaterial","color","geometry","BufferGeometry","setFromPoints","Vector3","Minimap","ref","scroll","urls","useSnapshot","height","viewport","delta","current","children","forEach","child","index","y","curve","length","scale","map","_","i"],"mappings":";;;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,MAAT,QAAuB,OAAvB;AACA,SAASC,QAAT,EAAmBC,QAAnB,QAAmC,oBAAnC;AACA,SAASC,SAAT,QAA0B,mBAA1B;AACA,SAASC,SAAT,QAA0B,wBAA1B;AACA,SAASC,KAAT,EAAgBC,IAAhB,QAA4B,QAA5B;;AAEA,MAAMC,QAAQ,GAAG,IAAIR,KAAK,CAACS,iBAAV,CAA4B;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA5B,CAAjB;AACA,MAAMC,QAAQ,GAAG,IAAIX,KAAK,CAACY,cAAV,GAA2BC,aAA3B,CAAyC,CACxD,IAAIb,KAAK,CAACc,OAAV,CAAkB,CAAlB,EAAqB,CAAC,GAAtB,EAA2B,CAA3B,CADwD,EAExD,IAAId,KAAK,CAACc,OAAV,CAAkB,CAAlB,EAAqB,GAArB,EAA0B,CAA1B,CAFwD,CAAzC,CAAjB;AAKA,OAAO,SAASC,OAAT,GAAmB;AAAA;;AACxB,QAAMC,GAAG,GAAGf,MAAM,EAAlB;AACA,QAAMgB,MAAM,GAAGb,SAAS,EAAxB;AACA,QAAM;AAAEc,IAAAA;AAAF,MAAWC,WAAW,CAACb,KAAD,CAA5B;AACA,QAAM;AAAEc,IAAAA;AAAF,MAAajB,QAAQ,CAAEG,KAAD,IAAWA,KAAK,CAACe,QAAlB,CAA3B;AACAnB,EAAAA,QAAQ,CAAC,CAACI,KAAD,EAAQgB,KAAR,KAAkB;AACzBN,IAAAA,GAAG,CAACO,OAAJ,CAAYC,QAAZ,CAAqBC,OAArB,CAA6B,CAACC,KAAD,EAAQC,KAAR,KAAkB;AAC7C;AACA;AACA;AACA;AACA,YAAMC,CAAC,GAAGX,MAAM,CAACY,KAAP,CACRF,KAAK,GAAGT,IAAI,CAACY,MAAb,GAAsB,MAAMZ,IAAI,CAACY,MADzB,EAER,IAAIZ,IAAI,CAACY,MAFD,CAAV;AAIAJ,MAAAA,KAAK,CAACK,KAAN,CAAYH,CAAZ,GAAgBrB,IAAI,CAACmB,KAAK,CAACK,KAAN,CAAYH,CAAb,EAAgB,MAAMA,CAAC,GAAG,CAA1B,EAA6B,CAA7B,EAAgCN,KAAhC,CAApB;AACD,KAVD;AAWD,GAZO,CAAR;AAaA,sBACE;AAAO,IAAA,GAAG,EAAEN,GAAZ;AAAA,cACGE,IAAI,CAACc,GAAL,CAAS,CAACC,CAAD,EAAIC,CAAJ,kBACR;AAEE,MAAA,QAAQ,EAAEvB,QAFZ;AAGE,MAAA,QAAQ,EAAEH,QAHZ;AAIE,MAAA,QAAQ,EAAE,CAAC0B,CAAC,GAAG,IAAJ,GAAWhB,IAAI,CAACY,MAAL,GAAc,IAA1B,EAAgC,CAACV,MAAD,GAAU,CAAV,GAAc,GAA9C,EAAmD,CAAnD;AAJZ,OACOc,CADP;AAAA;AAAA;AAAA;AAAA,YADD;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAYD;;GA9BenB,O;UAECX,S,EAEID,Q,EACnBD,Q;;;KALca,O","sourcesContent":["// import ImagePlane from \"../ImagePlane/ImagePlane\";\n// import { Suspense } from \"react\";\n\n// import { IMAGE_BLOCK_WIDTH, IMAGE_GAP } from \"../../utils/utilFormat\";\n// import { useThree } from \"@react-three/fiber\";\n// import { ScrollControls, Scroll } from \"@react-three/drei\";\n// import { imagesArr } from \"../../utils/utilFormat\";\n\n// const Scene = () => {\n//   const imgWidth = 0.7;\n//   const imgGap = 0.15;\n//   const numImages = imagesArr.length;\n//   const { width } = useThree((state) => state.viewport);\n//   const itemsLength = width + (numImages - 1) * (imgWidth + imgGap);\n\n//   return (\n//     <Suspense fallback={null}>\n//       <ScrollControls horizontal damping={5} pages={itemsLength / width}>\n//         <Scroll>\n//           {imagesArr.map((url, index) => {\n//             const imagePosition = [imgWidth * index + imgGap * index, 0, 0];\n//             return (\n//               <ImagePlane\n//                 key={index}\n//                 index={index}\n//                 url={url}\n//                 position={imagePosition}\n//                 scale={[imgWidth, 4, 1]}\n//               />\n//             );\n//           })}\n//         </Scroll>\n//       </ScrollControls>\n//     </Suspense>\n//   );\n// };\n\n// export default Scene;\n\nimport * as THREE from \"three\";\nimport { useRef } from \"react\";\nimport { useFrame, useThree } from \"@react-three/fiber\";\nimport { useScroll } from \"@react-three/drei\";\nimport { imagesArr } from \"../../utils/utilFormat\";\nimport { state, damp } from \"./util\";\n\nconst material = new THREE.LineBasicMaterial({ color: \"white\" });\nconst geometry = new THREE.BufferGeometry().setFromPoints([\n  new THREE.Vector3(0, -0.5, 0),\n  new THREE.Vector3(0, 0.5, 0),\n]);\n\nexport function Minimap() {\n  const ref = useRef();\n  const scroll = useScroll();\n  const { urls } = useSnapshot(state);\n  const { height } = useThree((state) => state.viewport);\n  useFrame((state, delta) => {\n    ref.current.children.forEach((child, index) => {\n      // Give me a value between 0 and 1\n      //   starting at the position of my item\n      //   ranging across 4 / total length\n      //   make it a sine, so the value goes from 0 to 1 to 0.\n      const y = scroll.curve(\n        index / urls.length - 1.5 / urls.length,\n        4 / urls.length\n      );\n      child.scale.y = damp(child.scale.y, 0.1 + y / 6, 8, delta);\n    });\n  });\n  return (\n    <group ref={ref}>\n      {urls.map((_, i) => (\n        <line\n          key={i}\n          geometry={geometry}\n          material={material}\n          position={[i * 0.06 - urls.length * 0.03, -height / 2 + 0.6, 0]}\n        />\n      ))}\n    </group>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}