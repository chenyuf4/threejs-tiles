{"ast":null,"code":"var _jsxFileName = \"/Users/chenyuf2/Desktop/three-shader/src/components/ImagePlane/ImagePlane.js\",\n    _s = $RefreshSig$();\n\nimport { useTexture } from \"@react-three/drei\";\nimport { Suspense, useState, useRef } from \"react\";\nimport { IMAGE_BLOCK_HEIGHT, IMAGE_BLOCK_WIDTH } from \"../../utils/utilFormat\";\nimport { useScroll } from \"@react-three/drei\";\nimport { useFrame } from \"@react-three/fiber\";\nimport * as THREE from \"three\";\nimport { imagesArr } from \"../../utils/utilFormat\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst damp = THREE.MathUtils.damp;\n\nconst ImagePlane = _ref => {\n  _s();\n\n  let {\n    index,\n    imgUrl,\n    position = [0, 0, 0],\n    scale = [1, 1, 1],\n    color = new THREE.Color(),\n    ...props\n  } = _ref;\n  const imgRef = useRef();\n  const [hover, setHover] = useState(false);\n  const [click, setClick] = useState(false);\n  const [imgTexture] = useTexture([imgUrl]);\n  imgTexture.repeat.set(65 * imgTexture.image.height / (imgTexture.image.width * 250), 1);\n  imgTexture.offset.set(0.42, 0);\n  const numImages = imagesArr.length;\n  const scroll = useScroll();\n  useFrame((state, delta) => {\n    if (!imgRef.current) return;\n    const y = scroll.curve(index / numImages - 1.5 / numImages, 4 / numImages);\n    imgRef.current.material.scale[1] = imgRef.current.scale.y = damp(imgRef.current.scale.y, 4 + y, 8, delta);\n    imgRef.current.material.scale[0] = imgRef.current.scale.x = damp(imgRef.current.scale.x, 1, 6, delta);\n    imgRef.current.material.grayscale = damp(imgRef.current.material.grayscale, hover ? 0 : Math.max(0, 1 - y), 6, delta);\n    imgRef.current.material.color.lerp(color.set(hover ? \"white\" : \"#aaa\"), hover ? 0.3 : 0.1);\n  });\n  return /*#__PURE__*/_jsxDEV(\"mesh\", {\n    position: position,\n    onPointerOver: () => setHover(true),\n    onPointerOut: () => setHover(false),\n    children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n      args: [IMAGE_BLOCK_WIDTH, IMAGE_BLOCK_HEIGHT]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n      map: imgTexture,\n      ref: imgRef,\n      scale: scale\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ImagePlane, \"kP0cB9AIIYItDACqePU6GL4FiiE=\", false, function () {\n  return [useTexture, useScroll, useFrame];\n});\n\n_c = ImagePlane;\nexport default ImagePlane;\n\nvar _c;\n\n$RefreshReg$(_c, \"ImagePlane\");","map":{"version":3,"sources":["/Users/chenyuf2/Desktop/three-shader/src/components/ImagePlane/ImagePlane.js"],"names":["useTexture","Suspense","useState","useRef","IMAGE_BLOCK_HEIGHT","IMAGE_BLOCK_WIDTH","useScroll","useFrame","THREE","imagesArr","damp","MathUtils","ImagePlane","index","imgUrl","position","scale","color","Color","props","imgRef","hover","setHover","click","setClick","imgTexture","repeat","set","image","height","width","offset","numImages","length","scroll","state","delta","current","y","curve","material","x","grayscale","Math","max","lerp"],"mappings":"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","sourcesContent":["import { useTexture } from \"@react-three/drei\";\nimport { Suspense, useState, useRef } from \"react\";\nimport { IMAGE_BLOCK_HEIGHT, IMAGE_BLOCK_WIDTH } from \"../../utils/utilFormat\";\nimport { useScroll } from \"@react-three/drei\";\nimport { useFrame } from \"@react-three/fiber\";\nimport * as THREE from \"three\";\nimport { imagesArr } from \"../../utils/utilFormat\";\nconst damp = THREE.MathUtils.damp;\nconst ImagePlane = ({\n  index,\n  imgUrl,\n  position = [0, 0, 0],\n  scale = [1, 1, 1],\n  color = new THREE.Color(),\n  ...props\n}) => {\n  const imgRef = useRef();\n  const [hover, setHover] = useState(false);\n  const [click, setClick] = useState(false);\n  const [imgTexture] = useTexture([imgUrl]);\n  imgTexture.repeat.set(\n    (65 * imgTexture.image.height) / (imgTexture.image.width * 250),\n    1\n  );\n  imgTexture.offset.set(0.42, 0);\n  const numImages = imagesArr.length;\n  const scroll = useScroll();\n  useFrame((state, delta) => {\n    if (!imgRef.current) return;\n    const y = scroll.curve(index / numImages - 1.5 / numImages, 4 / numImages);\n    imgRef.current.material.scale[1] = imgRef.current.scale.y = damp(\n      imgRef.current.scale.y,\n      4 + y,\n      8,\n      delta\n    );\n    imgRef.current.material.scale[0] = imgRef.current.scale.x = damp(\n      imgRef.current.scale.x,\n      1,\n      6,\n      delta\n    );\n    imgRef.current.material.grayscale = damp(\n      imgRef.current.material.grayscale,\n      hover ? 0 : Math.max(0, 1 - y),\n      6,\n      delta\n    );\n    imgRef.current.material.color.lerp(\n      color.set(hover ? \"white\" : \"#aaa\"),\n      hover ? 0.3 : 0.1\n    );\n  });\n  return (\n    <mesh\n      position={position}\n      onPointerOver={() => setHover(true)}\n      onPointerOut={() => setHover(false)}\n    >\n      <planeGeometry args={[IMAGE_BLOCK_WIDTH, IMAGE_BLOCK_HEIGHT]} />\n      <meshBasicMaterial map={imgTexture} ref={imgRef} scale={scale} />\n    </mesh>\n  );\n};\n\nexport default ImagePlane;\n"]},"metadata":{},"sourceType":"module"}