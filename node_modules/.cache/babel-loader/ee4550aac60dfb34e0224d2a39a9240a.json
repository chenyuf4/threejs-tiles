{"ast":null,"code":"var _jsxFileName = \"/Users/chenyuf2/Desktop/three-shader/src/components/ImagePlane/ImagePlane.js\",\n    _s = $RefreshSig$();\n\nimport { useTexture } from \"@react-three/drei\";\nimport { Suspense, useState, useRef, useEffect } from \"react\";\nimport { IMAGE_BLOCK_HEIGHT, IMAGE_BLOCK_WIDTH } from \"../../utils/utilFormat\";\nimport { useScroll, Image } from \"@react-three/drei\";\nimport { useFrame } from \"@react-three/fiber\";\nimport * as THREE from \"three\";\nimport { imagesArr } from \"../../utils/utilFormat\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst damp = THREE.MathUtils.damp;\n\nconst ImagePlane = _ref => {\n  _s();\n\n  let {\n    index,\n    position = [0, 0, 0],\n    scale = [1, 1, 1],\n    color = new THREE.Color(),\n    url,\n    ...props\n  } = _ref;\n  const imgRef = useRef();\n  const [hover, setHover] = useState(false);\n  const [click, setClick] = useState(false);\n  const [imgTexture] = useTexture([url]);\n  imgTexture.repeat.set(65 * imgTexture.image.height / (imgTexture.image.width * 250), 1);\n  imgTexture.offset.set(0.42, 0);\n  const numImages = imagesArr.length;\n  const scroll = useScroll();\n  useEffect(() => {\n    console.log(imgRef.current.material);\n  });\n  useFrame((state, delta) => {\n    if (!imgRef.current) return;\n    const y = scroll.curve(index / numImages - 1.5 / numImages, 4 / numImages); // imgRef.current.material.scale[1] = imgRef.current.scale.y = damp(\n    //   imgRef.current.scale.y,\n    //   4 + y,\n    //   8,\n    //   delta\n    // );\n    // imgRef.current.material.scale[0] = imgRef.current.scale.x = damp(\n    //   imgRef.current.scale.x,\n    //   1,\n    //   6,\n    //   delta\n    // );\n\n    imgRef.current.material.grayscale = damp(imgRef.current.material.grayscale || 0, hover ? 0 : Math.max(0, 1 - y), 6, delta);\n    imgRef.current.material.color.lerp(color.set(hover ? \"white\" : \"#aaa\"), hover ? 0.3 : 0.1);\n  });\n  return /*#__PURE__*/_jsxDEV(\"mesh\", {\n    ref: imgRef,\n    position: position,\n    onPointerOver: () => setHover(true),\n    onPointerOut: () => setHover(false),\n    children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n      args: [IMAGE_BLOCK_WIDTH, IMAGE_BLOCK_HEIGHT]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n      map: imgTexture,\n      ref: imgRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ImagePlane, \"fiSN7TDvVeS8HL0UzAu17GmLBpI=\", false, function () {\n  return [useTexture, useScroll, useFrame];\n});\n\n_c = ImagePlane;\nexport default ImagePlane;\n\nvar _c;\n\n$RefreshReg$(_c, \"ImagePlane\");","map":{"version":3,"sources":["/Users/chenyuf2/Desktop/three-shader/src/components/ImagePlane/ImagePlane.js"],"names":["useTexture","Suspense","useState","useRef","useEffect","IMAGE_BLOCK_HEIGHT","IMAGE_BLOCK_WIDTH","useScroll","Image","useFrame","THREE","imagesArr","damp","MathUtils","ImagePlane","index","position","scale","color","Color","url","props","imgRef","hover","setHover","click","setClick","imgTexture","repeat","set","image","height","width","offset","numImages","length","scroll","console","log","current","material","state","delta","y","curve","grayscale","Math","max","lerp"],"mappings":"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","sourcesContent":["import { useTexture } from \"@react-three/drei\";\nimport { Suspense, useState, useRef, useEffect } from \"react\";\nimport { IMAGE_BLOCK_HEIGHT, IMAGE_BLOCK_WIDTH } from \"../../utils/utilFormat\";\nimport { useScroll, Image } from \"@react-three/drei\";\nimport { useFrame } from \"@react-three/fiber\";\nimport * as THREE from \"three\";\nimport { imagesArr } from \"../../utils/utilFormat\";\nconst damp = THREE.MathUtils.damp;\nconst ImagePlane = ({\n  index,\n  position = [0, 0, 0],\n  scale = [1, 1, 1],\n  color = new THREE.Color(),\n  url,\n  ...props\n}) => {\n  const imgRef = useRef();\n  const [hover, setHover] = useState(false);\n  const [click, setClick] = useState(false);\n  const [imgTexture] = useTexture([url]);\n  imgTexture.repeat.set(\n    (65 * imgTexture.image.height) / (imgTexture.image.width * 250),\n    1\n  );\n  imgTexture.offset.set(0.42, 0);\n  const numImages = imagesArr.length;\n  const scroll = useScroll();\n  useEffect(() => {\n    console.log(imgRef.current.material);\n  });\n  useFrame((state, delta) => {\n    if (!imgRef.current) return;\n    const y = scroll.curve(index / numImages - 1.5 / numImages, 4 / numImages);\n    // imgRef.current.material.scale[1] = imgRef.current.scale.y = damp(\n    //   imgRef.current.scale.y,\n    //   4 + y,\n    //   8,\n    //   delta\n    // );\n    // imgRef.current.material.scale[0] = imgRef.current.scale.x = damp(\n    //   imgRef.current.scale.x,\n    //   1,\n    //   6,\n    //   delta\n    // );\n    imgRef.current.material.grayscale = damp(\n      imgRef.current.material.grayscale || 0,\n      hover ? 0 : Math.max(0, 1 - y),\n      6,\n      delta\n    );\n    imgRef.current.material.color.lerp(\n      color.set(hover ? \"white\" : \"#aaa\"),\n      hover ? 0.3 : 0.1\n    );\n  });\n  return (\n    <mesh\n      ref={imgRef}\n      position={position}\n      onPointerOver={() => setHover(true)}\n      onPointerOut={() => setHover(false)}\n    >\n      <planeGeometry args={[IMAGE_BLOCK_WIDTH, IMAGE_BLOCK_HEIGHT]} />\n      <meshBasicMaterial map={imgTexture} ref={imgRef} />\n    </mesh>\n  );\n};\n\nexport default ImagePlane;\n"]},"metadata":{},"sourceType":"module"}